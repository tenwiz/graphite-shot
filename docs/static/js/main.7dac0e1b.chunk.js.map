{"version":3,"sources":["Dropzone.tsx","ColorPicker.tsx","Toolbar.tsx","App.tsx","hooks.ts","serviceWorker.js","index.js","icons/download.svg"],"names":["Wrapper","styled","div","Placeholder","Cover","children","onImage","hasImage","onDrop","useCallback","acceptedFiles","file","reader","FileReader","addEventListener","img","Image","src","result","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","Button","p","color","Popover","Palette","Item","onChange","palette","useState","open","setOpen","onClick","rgb","r","g","b","a","map","c","i","key","Pickers","bgColor","onBgColor","windowColor","onWindowColor","imageColor","content","windowPalette","useMemo","unshift","ColorPicker","htmlToImage","toPng","then","dataUrl","console","log","saveAs","catch","error","downloadImg","Border","Content","bg","Window","Header","Dot","canvas","useRef","image","setImage","useEffect","listener","e","data","clipboardData","items","item","type","indexOf","blob","getAsFile","URLObj","window","URL","webkitURL","createObjectURL","removeEventListener","usePastedImage","setColor","onload","ctx","getContext","w","width","h","height","devicePixelRatio","mozImageSmoothingEnabled","imageSmoothingEnabled","drawImage","getImageData","colors","n","length","slice","join","Object","entries","reduce","value","useImageColor","current","setBgColor","setWindowColor","contentRef","Toolbar","ref","Dropzone","style","display","Boolean","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.7dac0e1b.chunk.js","sourcesContent":["import React, {PropsWithChildren, useCallback} from \"react\";\nimport styled from \"styled-components\";\nimport {useDropzone} from \"react-dropzone\";\n\nconst Wrapper = styled.div`\n\tposition: relative;\n\tflex-direction: column;\n\tdisplay: flex;\n\tflex: 1;\n`;\n\nconst Placeholder = styled.div`\n\tborder: 1px dashed white;\n\tborder-radius: 4px;\n\tflex: 1;\n\talign-items: center;\n\tjustify-content: center;\n\tdisplay: flex;\n`;\n\nconst Cover = styled.div`\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tbackground: hsla(218, 50%, 50%, 0.5);\n`;\n\ninterface Props {\n\tonImage: (image: HTMLImageElement) => void;\n\thasImage: boolean;\n}\n\nexport default ({children, onImage, hasImage}: PropsWithChildren<Props>) => {\n\tconst onDrop = useCallback(acceptedFiles => {\n\t\tfor (let file of acceptedFiles) {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.addEventListener(\n\t\t\t\t\"load\",\n\t\t\t\t() => {\n\t\t\t\t\tlet img = new Image();\n\t\t\t\t\timg.src = reader.result as string;\n\t\t\t\t\tonImage(img);\n\t\t\t\t},\n\t\t\t\tfalse\n\t\t\t);\n\t\t\treader.readAsDataURL(file);\n\t\t\treturn;\n\t\t}\n\t}, []);\n\n\tconst {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n\n\treturn (\n\t\t<Wrapper {...getRootProps()}>\n\t\t\t<input {...getInputProps()} />\n\t\t\t{children}\n\t\t\t{!hasImage && (\n\t\t\t\t<Placeholder>Drop or paste an image here.</Placeholder>\n\t\t\t)}\n\t\t\t{isDragActive && <Cover />}\n\t\t</Wrapper>\n\t);\n};\n","import React, {useState} from \"react\";\nimport styled from \"styled-components\";\nimport {ChromePicker, ColorResult} from \"react-color\";\n\nconst Wrapper = styled.div`\n\tposition: relative;\n`;\n\nconst Button = styled.div<{color: string}>`\n\tbackground: ${p => p.color};\n\tborder-radius: 2px;\n\tborder: 1px solid white;\n\theight: 30px;\n\twidth: 30px;\n\tmargin: 5px;\n\tcursor: pointer;\n\t&:hover {\n\t\tfilter:brightness(1.4);\n\t}\n`;\n\nconst Popover = styled.div`\n\tposition: absolute;\n\tz-index: 2;\n`;\n\nconst Cover = styled.div`\n\tposition: fixed;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n`;\n\nconst Palette = styled.div`\n\tdisplay: flex;\n\twidth: 225px;\n\tbackground: white;\n\tpadding: 4px 4px;\n\tbox-sizing: border-box;\n`;\n\nconst Item = styled.div<{color: string}>`\n\twidth: 12px;\n\theight: 12px;\n\tbackground: ${p => p.color};\n\tborder-radius: 2px;\n\tmargin: 4px;\n\tbox-shadow: inset 0px 0px 2px rgba(0, 0, 0, 0.2);\n\tcursor: pointer;\n`;\n\ninterface Props {\n\tonChange: (color: string) => void;\n\tcolor: string;\n\tpalette?: string[];\n}\nexport default ({color, onChange, palette}: Props) => {\n\tconst [open, setOpen] = useState(false);\n\n\tconst onColorChange = (result: ColorResult) => {\n\t\tconst {r, g, b, a} = result.rgb;\n\t\tonChange(`rgba(${r},${g},${b},${a})`);\n\t};\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Button color={color} onClick={() => setOpen(true)} />\n\t\t\t{open && (\n\t\t\t\t<>\n\t\t\t\t\t<Cover onClick={() => setOpen(false)} />\n\t\t\t\t\t<Popover>\n\t\t\t\t\t\t<ChromePicker color={color} onChange={onColorChange} />\n\t\t\t\t\t\t{palette && (\n\t\t\t\t\t\t\t<Palette>\n\t\t\t\t\t\t\t\t{palette.map((c, i) => (\n\t\t\t\t\t\t\t\t\t<Item\n\t\t\t\t\t\t\t\t\t\tonClick={() => onChange(c)}\n\t\t\t\t\t\t\t\t\t\tcolor={c}\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Palette>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Popover>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Wrapper>\n\t);\n};\n","import React, {useMemo} from \"react\";\nimport styled from \"styled-components\";\nimport ColorPicker from \"./ColorPicker\";\nimport downloadImg from \"./icons/download.svg\";\nimport htmlToImage from \"html-to-image\";\nimport {saveAs} from \"file-saver\";\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nconst Pickers = styled.div`\n\tdisplay: flex;\n`;\n\nconst Button = styled.div`\n\tborder-radius: 2px;\n\tborder: 1px solid white;\n\theight: 30px;\n\twidth: 30px;\n\tmargin: 5px;\n\tcolor: white;\n\tcursor: pointer;\n\tbox-sizing: border-box;\n\tpadding: 1px;\n\t&:hover {\n\t\tbackground: rgba(200, 200, 200, 0.4);\n\t}\n`;\n\ninterface Props {\n\tbgColor: string;\n\tonBgColor: (color: string) => void;\n\twindowColor: string;\n\tonWindowColor: (color: string) => void;\n\timageColor: string | null;\n\tcontent: HTMLDivElement | null;\n}\n\nexport default ({\n\tbgColor,\n\tonBgColor,\n\twindowColor,\n\tonWindowColor,\n\timageColor,\n\tcontent,\n}: Props) => {\n\tconst save = () => {\n\t\tif (!content) return;\n\t\thtmlToImage\n\t\t\t.toPng(content)\n\t\t\t.then(dataUrl => {\n\t\t\t\tconsole.log(dataUrl);\n\t\t\t\tsaveAs(dataUrl, \"graphite.png\");\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(\"oops, something went wrong!\", error);\n\t\t\t});\n\t};\n\n\tconst windowPalette = useMemo(() => {\n\t\tconst c = [\"#3D7BC7\", \"#17826D\", \"#F7EBD1\", \"#DFAC5D\", \"#44B87E\"];\n\t\tif (imageColor) c.unshift(imageColor);\n\t\treturn c;\n\t}, [imageColor]);\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Pickers>\n\t\t\t\t<ColorPicker\n\t\t\t\t\tcolor={bgColor}\n\t\t\t\t\tonChange={onBgColor}\n\t\t\t\t\tpalette={[\n\t\t\t\t\t\t\"#3D7BC7\",\n\t\t\t\t\t\t\"#17826D\",\n\t\t\t\t\t\t\"#F7EBD1\",\n\t\t\t\t\t\t\"#DFAC5D\",\n\t\t\t\t\t\t\"#44B87E\",\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<ColorPicker\n\t\t\t\t\tcolor={windowColor}\n\t\t\t\t\tonChange={onWindowColor}\n\t\t\t\t\tpalette={windowPalette}\n\t\t\t\t/>\n\t\t\t</Pickers>\n\t\t\t{content && (\n\t\t\t\t<Button onClick={save}>\n\t\t\t\t\t<img src={downloadImg} />\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t</Wrapper>\n\t);\n};\n","import React, {useEffect, useRef, useState} from \"react\";\nimport styled from \"styled-components\";\nimport {useImageColor, usePastedImage} from \"./hooks\";\nimport Dropzone from \"./Dropzone\";\nimport Toolbar from \"./Toolbar\";\n\nconst Wrapper = styled.div`\n\tmin-width: 400px;\n`;\n\n/**\n * This border element is needed so that it will not be saved in the image\n * and the result will not have rounded corners\n */\nconst Border = styled.div`\n\tborder: 2px solid white;\n\tborder-radius: 4px;\n\toverflow: hidden;\n`;\n\nconst Content = styled.div<{bg: string}>`\n\tmargin: auto;\n\tpadding: 10px;\n\tbackground: ${p => p.bg};\n\tpadding: 64px;\n\tbox-sizing: border-box;\n\t//resize: both;\n\t//overflow: auto;\n`;\n\nconst Window = styled.div<{bg: string}>`\n\tbackground: ${p => p.bg};\n\tborder-radius: 10px;\n\tbox-shadow: 10px 10px 20px rgba(0, 0, 0, 0.4);\n\tmin-height: 100px;\n\theight: 100%;\n\tpadding: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n`;\n\nconst Header = styled.div`\n\tdisplay: flex;\n\tmargin-bottom: 8px;\n`;\n\nconst Dot = styled.div<{color: string}>`\n\tbackground: ${p => p.color};\n\twidth: 12px;\n\theight: 12px;\n\tborder-radius: 50%;\n\tmargin: 4px;\n`;\n\nexport default () => {\n\tconst canvas = useRef<HTMLCanvasElement>(null);\n\tconst [image, setImage] = usePastedImage();\n\tconst imageColor = useImageColor(canvas?.current, image ?? null);\n\tconst [bgColor, setBgColor] = useState(\"cadetblue\");\n\tconst [windowColor, setWindowColor] = useState(\"#263238\");\n\tconst contentRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tif (imageColor) setWindowColor(imageColor);\n\t}, [imageColor]);\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Toolbar\n\t\t\t\t{...{bgColor, windowColor, imageColor}}\n\t\t\t\tcontent={contentRef.current}\n\t\t\t\tonBgColor={setBgColor}\n\t\t\t\tonWindowColor={setWindowColor}\n\t\t\t/>\n\n\t\t\t<Border>\n\t\t\t\t<Content bg={bgColor} ref={contentRef as any}>\n\t\t\t\t\t<Window bg={windowColor}>\n\t\t\t\t\t\t<Header>\n\t\t\t\t\t\t\t<Dot color={\"#FF6259\"} />\n\t\t\t\t\t\t\t<Dot color={\"#FFBF2F\"} />\n\t\t\t\t\t\t\t<Dot color={\"#29CE42\"} />\n\t\t\t\t\t\t</Header>\n\t\t\t\t\t\t<Dropzone\n\t\t\t\t\t\t\thasImage={!!image}\n\t\t\t\t\t\t\tonImage={image => setImage(image)}>\n\t\t\t\t\t\t\t<canvas\n\t\t\t\t\t\t\t\tref={canvas}\n\t\t\t\t\t\t\t\tstyle={{display: !!image ? \"initial\" : \"none\"}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Dropzone>\n\t\t\t\t\t</Window>\n\t\t\t\t</Content>\n\t\t\t</Border>\n\t\t</Wrapper>\n\t);\n};\n","import {Dispatch, SetStateAction, useEffect, useState} from \"react\";\n\nexport const usePastedImage = (): [\n\tHTMLImageElement | undefined,\n\tDispatch<SetStateAction<HTMLImageElement | undefined>>\n] => {\n\tconst [image, setImage] = useState<HTMLImageElement>();\n\tuseEffect(() => {\n\t\tconst listener = (e: Event) => {\n\t\t\tconst {clipboardData: data} = e as ClipboardEvent;\n\t\t\tconst items = data?.items || [];\n\n\t\t\tfor (let item of items) {\n\t\t\t\tif (item.type.indexOf(\"image\") == -1) continue;\n\t\t\t\tconst blob = item.getAsFile();\n\t\t\t\tlet img = new Image();\n\t\t\t\tlet URLObj = window.URL || window.webkitURL;\n\t\t\t\timg.src = URLObj.createObjectURL(blob);\n\t\t\t\tsetImage(img);\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener(\"paste\", listener);\n\t\treturn () => window.removeEventListener(\"paste\", listener);\n\t}, []);\n\n\treturn [image, setImage];\n};\n\nexport const useImageColor = (\n\tcanvas: HTMLCanvasElement | null,\n\timage: HTMLImageElement | null\n) => {\n\tconst [color, setColor] = useState<string | null>(null);\n\tuseEffect(() => {\n\t\tif (!image) return;\n\t\timage.onload = () => {\n\t\t\tif (!canvas || !image) return;\n\t\t\tlet ctx = canvas.getContext(\"2d\");\n\t\t\tif (!ctx) return;\n\n\t\t\tconst w = image.width;\n\t\t\tconst h = image.height;\n\n\t\t\t// apply scaling based on pixel ratio?\n\t\t\t// todo review this\n\t\t\tcanvas.width = w / window.devicePixelRatio;\n\t\t\tcanvas.height = h / window.devicePixelRatio;\n\n\t\t\t(ctx as any).mozImageSmoothingEnabled = false;\n\t\t\t(ctx as any).imageSmoothingEnabled = false;\n\t\t\tctx.drawImage(image, 0, 0, w, h, 0, 0, canvas.width, canvas.height);\n\n\t\t\tlet {data} = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\t\t\tconst colors: {[key: string]: number} = {};\n\n\t\t\tfor (let i = 0, n = data.length; i < n; i += 4) {\n\t\t\t\tconst key = data.slice(i, i + 4).join(\",\");\n\t\t\t\tcolors[key] = colors[key] + 1 || 1;\n\t\t\t}\n\t\t\tconst color = Object.entries(colors).reduce(\n\t\t\t\t(a, [key, value]) => {\n\t\t\t\t\tif (value > a[1]) return [key, value];\n\t\t\t\t\treturn a;\n\t\t\t\t},\n\t\t\t\t[\"\", 0]\n\t\t\t)[0];\n\n\t\t\tsetColor(`rgba(${color})`);\n\t\t};\n\t}, [image]);\n\treturn color;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/download.00389a4b.svg\";"],"sourceRoot":""}